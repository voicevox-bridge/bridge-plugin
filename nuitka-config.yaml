- module-name: 'torch.utils.data._typing'
  anti-bloat:
    - description: 'remove code which raise exception'
      replacements_plain:
        "'__init_subclass__': _dp_init_subclass": "'__init_subclass__': classmethod(_dp_init_subclass)"

- module-name: 'numba.core.decorators'
  anti-bloat:
    - description: 'replace decorators'
      module_code: |
        from numba.stencils.stencil import stencil

        def _wrapper(f):
            return f

        def jit(*args, **kwargs):
            return _wrapper

        def generated_jit(*args, **kwargs):
            return _wrapper

        def njit(*args, **kwargs):
            return _wrapper

        def cfunc(*args, **kwargs):
            return _wrapper

        def jit_module(*args, **kwargs):
            pass

- module-name: 'torch._jit_internal'
  anti-bloat:
    - description: 'remove warning'
      replacements_plain:
        'warnings.warn(f"Unable to retrieve source': '#'

- module-name: 'librosa.decompose'
  anti-bloat:
    - description: 'remove sklearn dependency'
      replacements_plain:
        'import sklearn.decomposition': '#'

- module-name: 'librosa.segment'
  anti-bloat:
    - description: 'remove sklearn dependency'
      replacements_plain:
        'import sklearn': '#'

- module-name: 'tacotron_cleaner.cleaners'
  anti-bloat:
    - description: 'remove unidecode dependency'
      replacements:
        'from unidecode import unidecode': '#'
        'def convert_to_ascii(text):': '#'
        'return unidecode(text)': '#'

- module-name: 'pysoundfile'
  data-files:
    dest_path: '.'
    dirs:
      - '_soundfile_data'

- module-name: 'llvmlite'
  data-files:
    dest_path: '.'
    patterns:
      - 'binding/*llvmlite.*'

- module-name: 'espnet'
  data-files:
    patterns:
      - 'version.txt'

- module-name: 'librosa'
  data-files:
    dirs:
      - 'util/example_data'

- module-name: 'resampy'
  data-files:
    dirs:
      - 'data'

- module-name: 'jamo'
  data-files:
    dirs:
      - 'data'